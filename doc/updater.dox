/*!
@class QtAutoUpdater::Updater

The updater class has the task to run the maintenancetool to check for updates. It will
evalute the results of the tool and generate update information of it. In addition of that,
it can schedule the maintenancetool to run in updater mode as soon as the application
finishes. (This requires the Updater instance to exist until QCoreApplication::quit is called).

@sa @ref index REAMDE.md, QtAutoUpdater::UpdateController
*/

/*!
@property QtAutoUpdater::Updater::maintenanceToolPath

@default{`./maintenancetool` on Windows/X11, `../../maintenancetool` on mac}

The path of the maintenancetool has to be set inside of the constructor and cannot be
changed later.<br/>
The path will be resolved relative to QCoreApplication::applicationDirPath(), the location
of the currently running application.

The updater will check whether or not the given path has a file-extension. If not, it
will try to add the given extension. This will result into:

 - **Windows**: `./maintenancetool.exe` (e.g. `C:/Program Files/MyApp/maintenancetool.exe`)
 - **Mac**: `../../maintenancetool.app/Content/MacOS/maintenancetool` (e.g. `/Applications/MyApp.app/maintenancetool.app/Content/MacOS/maintenancetool`)
 - **X11**: `./maintenancetool` (unchanged, e.g. `/opt/MyApp/maintenancetool`)

@accessors{
	@readAc{maintenanceToolPath()}
	@constantAc
	@finalAc
}

@sa Updater::Updater(QObject *), Updater::Updater(const QString &, QObject *)
*/

/*!
@property QtAutoUpdater::Updater::running

@default{`false`}

The updater can only check for updates once at a time. If this property returns `true`,
you will have to wait for it to finish to get your update result or check for updates again.

@accessors{
	@readAc{isRunning()}
	@notifyAc{runningChanged()}
}

@sa Updater::checkForUpdates, Updater::abortUpdateCheck, Updater::exitedNormally, Updater::errorCode, Updater::errorLog
*/

/*!
@property QtAutoUpdater::Updater::updateInfo

@default{<i>&lt;empty list&gt;</i>}

The update result is only valid for the last update check and won't be updated until
you check for updates again. When checking for updates, the list will be cleared before
the updater starts the check.<br>
To find out whether the list is truly empty or just because the updater is running, use
the Updater::running property. If it returns `false`, you can assume that the value of this
property is the result of the last update check (if one happend).

@accessors{
	@readAc{updateInfo()}
	@notifyAc{updateInfoChanged()}
}

@sa Updater::running
*/

/*!
@fn QtAutoUpdater::Updater::Updater(QObject *)

@param parent The object parent for QObject

The maintenancetool path will be set to the default one (and cannot be changed).
See Updater::maintenanceToolPath for more details.

@sa Updater::maintenanceToolPath
*/

/*!
@fn QtAutoUpdater::Updater::Updater(const QString &, QObject *)

@param maintenanceToolPath The path to the maintenancetool
@copydetails Updater::Updater(QObject *)
*/

/*!
@fn QtAutoUpdater::Updater::~Updater

Desytroyes the updater. If the maintenancetool process is still running, it will be killed
(hard, not friendly). To avoid this, check if Updater::running returns `false` or use
Updater::abortUpdateCheck to gracefully shut down the maintenancetool

@sa Updater::running, Updater::abortUpdateCheck
*/

/*!
@fn QtAutoUpdater::Updater::exitedNormally

@returns `true`, if the maintenancetool finished normally, `false` if not

Exiting normally does **not** mean the the update was successfull, only that the
maintenancetool exited itself and was not killed or crashed.<br/>
If `false` is returned, in most cases the process either crashed or was never even
able to start. Use Updater::errorCode to get the code. If the tool failed to start,
it's most certanly because of an invalid path to the maintenancetool.

While the updater is running, this function will always return `true`.

@attention Depending on the return of this function, the meaning of Updater::errorCode
and Updater::errorLog will change!

@sa Updater::running, Updater::errorCode, Updater::errorLog
*/

/*!
@fn QtAutoUpdater::Updater::errorCode

@returns The exit-code of the maintenancetool or an error code

@attention The meaning of this functions return value depends on what Updater::exitedNormally
returns

If the maintenancetool exited normally, this function will return the actual exit code
of the maintenancetool. Please note that `EXIT_SUCCESS (0)` means that there are updates
available and `EXIT_FAILURE (1)` can mean either no updates or some other kind of error. Thus, the
exit code is no indicator for success or failure. Please check the
[Qt Installer Framework](https://doc.qt.io/qtinstallerframework/) documentation for more details
about the tool itself.

If the maintenancetool did not exit normally, the returned error-code will be one of
QProcess::ProcessError.

While the updater is running, this function will always return 0.

@sa Updater::exitedNormally, Updater::running, Updater::errorLog
*/

/*!
@fn QtAutoUpdater::Updater::errorLog

@returns The error log of the last run of the maintenancetool

@attention The meaning of this functions return value depends on what Updater::exitedNormally
returns

If the maintenancetool exited normally, this function will return the stderr (standard error)
output generated by the maintenancetool. If the maintenancetool actually fails, you
can use this to find out why.

If the maintenancetool did not exit normally, the returned log will be the error
string of the last devide error of the process, i.e. QProcess::errorString

While the updater is running, this function will always return an empty QByteArray.

@sa Updater::exitedNormally, Updater::errorCode, Updater::running
*/

/*!
@fn QtAutoUpdater::Updater::willRunOnExit

@returns `true`, if the maintenancetool will run on application exit

@sa Updater::runUpdaterOnExit(AdminAuthoriser *), Updater::cancelExitRun
*/

/*!
@fn QtAutoUpdater::Updater::checkForUpdates

@returns `true`, if the check for updates process was started

Checking for updates means that the maintenancetool will be run in background
using `--checkupdates` as parameter. The function will return immideatly after the
process was started.

If no update process is currently running, `true` will be returned, no matter whether the
maintenancetool was actually startet or not. To check if it was successfull, wait for
checkUpdatesDone() to be emitted and check the result using the error functions.
Updater::running will be set to `true`.

If the updater is already running the maintenancetool, `false` will be returned and
nothing will happen.

@sa Updater::abortUpdateCheck, Updater::checkUpdatesDone, Updater::running,
Updater::updateInfo
*/

/*!
@fn QtAutoUpdater::Updater::abortUpdateCheck

@param maxDelay The maximum delay to wait for the process to gracefully finish
@param async If `true`, the wait will be done asynchrounusly

Tries to abort the update check. If no update is currently running (Updater::running
returns `false`), nothing will happen.

If `maxDelay` is greater than 0, the updater will try to gracefully terminate
(QProcess::terminate) the process. After this is done, the updater will wait at most
`maxDelay` milliseconds for the process to finish. If it doesn't, it will be killed
(QProcess::kill).

If `async` is `false`, this function will block and not return until the process was actually
terminated (or killed). If it's `true`, the function will return immediately. You can
use Updater::running. To find out when the process actually finishes.

@warning In most cases there will be no side-effects of an abort. However, if the tool has to be killed,
because of no delay or a timeout, this may cause unwanted effects. As an example, you may not be able to
start the tool until you restart your system, or worst case scenario, break the installation.
If possible, do not abort the check, but instead just wait for it to finish.

@sa Updater::checkForUpdates, Updater::running, Updater::exitedNormally
*/

/*!
@fn QtAutoUpdater::Updater::scheduleUpdate(int , bool)

@param delaySeconds The time (in seconds) to wait until the update is started
@param repeated Specifies, whether the updater should be started every `delaySeconds`
or only once
@returns The internal ID of this update task. Can be used to cancel the task

Schedules an update to be run after `delaySeconds` seconds. If `repeated` is `true`, the
updater will not just be run once, but every `delaySeconds` seconds (infinitly, until
this instance is destroyed or the task canceled).

@note After scheduling the update, you will have no way to take track of the schedule.
If the updater is already running while the task is triggered, nothing will happend.
The scheduled update will only work if this same instance of the updater is still alive
at that time.

@sa Updater::cancelScheduledUpdate, Updater::checkForUpdates
*/

/*!
@fn QtAutoUpdater::Updater::scheduleUpdate(const QDateTime &)

@param when The timepoint where the update should be started
@returns The internal ID of this update task. Can be used to cancel the task

Schedules an update to be run at `when`. If `when` is in the past, nothing will happen and
0 will be returned. The update will be started once that time is reached (assuming that
this updater instance is still alive at that timepoint).

@note After scheduling the update, you will have no way to take track of the schedule.
If the updater is already running while the task is triggered, nothing will happend.
The scheduled update will only work if this same instance of the updater is still alive
at that time.

@sa Updater::cancelScheduledUpdate, Updater::checkForUpdates
*/

/*!
@fn QtAutoUpdater::Updater::cancelScheduledUpdate

@param taskId The id of the task to be canceled

Cancels the task with the id `taskId`. If there was a task with that ID, you can be shure
that it will be canceled. If the task was not until the point you call this function, it
will not be triggered anymore.

@sa Updater::scheduleUpdate(int , bool),
Updater::scheduleUpdate(const QDateTime &),
Updater::abortUpdateCheck
*/

/*!
@fn QtAutoUpdater::Updater::runUpdaterOnExit(AdminAuthoriser *)

@param authoriser An optional admin authoriser instance to execture the updater as admin

Schedules the maintenancetool to be run on exit. This means that as soon as the
application exits, the updater will run the maintenancetool (with the default parameter `--updater`)
detached. This way you can let the user do the actual update if you found that there
are new updates.

@attention For this to work, this updater instance must exist (not be deleted) until
QCoreApplication::aboutToQuit was emitted, since that's what the updater will use to
determine that the application is exiting and to start the maintenancetool. If an updater
with a run on exit is destroyed, a warning will be generated.

The `authoriser` is an optional parameter that can be used to provide elevated rights.
If it points to an AdminAuthoriser, that one will be used to start the maintenancetool
with elevated rights (as admin/root) instead of starting it with the current user.

If the updater is already scheduled to run on exit, this function will overwrite the
arguments and admin authorisation, i.e. the last call to this function will determine
how the updater starts. To cancel this (stop the maintenancetool from beeing started),
you cann use Updater::cancelExitRun.

@sa Updater::willRunOnExit, Updater::cancelExitRun, AdminAuthoriser
*/

/*!
@fn QtAutoUpdater::Updater::runUpdaterOnExit(const QStringList &, AdminAuthoriser *)

@param arguments The custom arguments to be passed to to the maintenancetool
@copydetails Updater::runUpdaterOnExit(AdminAuthoriser *)
*/

/*!
@fn QtAutoUpdater::Updater::cancelExitRun

Cancels the "run on exit". If the maintenancetool was scheduled to be run at exit, this
function will cancel that and nothing will happend on exit.

@sa Updater::willRunOnExit, Updater::runUpdaterOnExit(AdminAuthoriser *)
*/

/*!
@fn QtAutoUpdater::Updater::checkUpdatesDone

@param hasUpdates Specifies whether or not the new updates could be found
@param hasError `true`, if the updater did not exit normally or provided invalid data, `false` if everything is ok

`hasUpdates` can be used to determine if there are updates. If it is set to true, you
can assume that Updater::updateInfo contains at least one value (but it's not guaranteed).

`hasError` basically summarises the error state. If it is `false`, everything is ok. If
it is `true`, the maintenancetool did not work properly. You can use the error functions
to find out if and what went wrong.

@note If `hasError` is false, it does not neccesarily mean that everything went fine. Since
the maintenancetool returns `EXIT_FAILURE (1)` if no new updates are available, it cannot be
used as an error indicator, you will have to use the other functions provided to get the actual error.

@sa Updater::checkForUpdates, Updater::running, Updater::updateInfo, Updater::exitedNormally,
Updater::errorCode, Updater::errorLog
*/
