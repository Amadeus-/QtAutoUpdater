/*!
@class QtAutoUpdater::UpdateButton

The UpdateButton is a ready-made "button" to check for updates. It is connected to this
controller and thus will automatically start checking for updates. Since the button itself
shows a progress, no progress dialog is needed here. For images check the @ref image_page "Image Page".

The button will represent the controllers state and automatically enable/disable itself to
avoid start beeing called twice. In addition to that, the whole button widget will be disabled
if the controller gets deleted while the button is still existings. (Even if it wasn't,
it will not crash if the button is clicked).

@sa QtAutoUpdater::UpdateController, UpdateController::createUpdateAction, @ref image_page "Image Page"
*/

/*!
@property QtAutoUpdater::UpdateButton::animationFile

@default{`:/QtAutoUpdater/icons/updateRunning.gif`}

The default file will show a simple idle animation. If this does not fit into your ui,
you can use this property to specify a different animation source.

@accessors{
	@readAc{animationFile()}
	@writeAc{setAnimationFile()}
	@writeAc{setAnimationDevice()}
	@resetAc{resetAnimationFile()}
}

@sa @ref image_page "Image Page"
*/

/*!
@property QtAutoUpdater::UpdateButton::showResult

@default{`true`}

If set to `true`, after an update check, a short info text will be shown next to the button.
It will tell the user whether updates are available or not. In addition to that, if updates
are available, the button will be disabled.<br>
If set to `false`, the button will not show any information after the update and return to the
state it had before checking for updates - just a simple button.<br>
In both cases, while the updater is running, the information will be shown as always.

@accessors{
	@readAc{isShowingResult()}
	@writeAc{setShowResult()}
}

@sa @ref image_page "Image Page", UpdateButton::animationFile
*/

/*!
@property QtAutoUpdater::UpdateButton::displayLevel

@default{`UpdateController::ExtendedInfoLevel`}

This will simply be used as parameter for UpdateController::start when the button is clicked.

@accessors{
	@readAc{displayLevel()}
	@writeAc{setDisplayLevel()}
}

@sa UpdateController::start, UpdateController::DisplayLevel
*/

/*!
@property QtAutoUpdater::UpdateButton::controller

@default{`nullptr`}

The button can only be used correctly if a controller is set. If no controller is set,
the button will be disabled. Changing the controller will reset the buttons state. If the
controller gets destroyed, the button will reset and disabled itself automatically.

@note You can manually enable the button, even without a set controller. In this case, all that
happens is nothing: The button will be there, but just nothing happens if it is clicked.

@accessors{
	@readAc{controller()}
	@writeAc{setController()}
	@notifyAc{controllerChanged()}
}

@sa QtAutoUpdater::UpdateController, UpdateButton::resetState
*/

/*!
@fn QtAutoUpdater::UpdateButton::UpdateButton

@param parent The parent widget of the button
@param controller The UpdateController to be used by the button

If `controller` is `nullptr`, the button will be disabled until you set a controller manually.

@sa UpdateButton::controller
*/

/*!
@fn QtAutoUpdater::UpdateButton::resetState

The button will look like it looks after it's creation. Any progress or message will be reset.
However, if the UpdateButton itself is disabled because of a missing controller, this will not be
reset. Neither will the animation file or the display level be reset.

@note Calling this slot while the updater is running will still reset the button, but after the updater
has finished, the button will show the result (if enabled).

@sa UpdateButton::showResult, UpdateButton::animationFile, UpdateController::running
*/

