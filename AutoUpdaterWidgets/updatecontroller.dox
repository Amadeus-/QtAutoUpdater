/*!
@page image_page Image Page

@brief Shows sample images for the updater for all the supported platforms

Back to UpdaterController.

## Windows - Windows 10
#### The Updater Elements
@image html ./doc/images/win/dialog_ask.png "Ask Dialog"<br>
@image html ./doc/images/win/dialog_progress.png "Progress Dialog"<br>
@image html ./doc/images/win/dialog_no_updates.png "No Updates Dialog"<br>
@image html ./doc/images/win/dialog_info.png "Update Information Dialog"<br>
@image html ./doc/images/win/dialog_exit.png "Automatic Run - Exit Notification Dialog"<br>

#### The Update Panel
@image html ./doc/images/win/panel_idle.png "Panel before clicking"<br>
@image html ./doc/images/win/panel_checking.png "Panel while checking"<br>
@image html ./doc/images/win/panel_updates.png "Panel with updates"<br>
@image html ./doc/images/win/panel_no_updates.png "Panel without updates"<br>

#### The Action
@image html ./doc/images/win/action.png "Update action inside a menu and a toolbar"<br>

## Mac - OsX 10.11
The following pictures show the controller with a parent windows. Thus, all dialogs
are shown as "sheets" to that window. If you create the UpdateController without a widget,
they will show as normal toplevel windows instead.

#### The Updater Elements
@image html ./doc/images/mac/dialog_ask.png "Ask Dialog"<br>
@image html ./doc/images/mac/dialog_progress.png "Progress Dialog"<br>
@image html ./doc/images/mac/dialog_no_updates.png "No Updates Dialog"<br>
@image html ./doc/images/mac/dialog_info.png "Update Information Dialog"<br>
@image html ./doc/images/mac/dialog_exit.png "Automatic Run - Exit Notification Dialog"<br>

#### The Update Panel
@image html ./doc/images/mac/panel_idle.png "Panel before clicking"<br>
@image html ./doc/images/mac/panel_checking.png "Panel while checking"<br>
@image html ./doc/images/mac/panel_updates.png "Panel with updates"<br>
@image html ./doc/images/mac/panel_no_updates.png "Panel without updates"<br>

#### The Action
@image html ./doc/images/mac/action.png "Update action inside a menu and a toolbar"<br>

## X11 - Ubuntu 14.04
#### The Updater Elements
@image html ./doc/images/x11/dialog_ask.png "Ask Dialog"<br>
@image html ./doc/images/x11/dialog_progress.png "Progress Dialog"<br>
@image html ./doc/images/x11/dialog_no_updates.png "No Updates Dialog"<br>
@image html ./doc/images/x11/dialog_info.png "Update Information Dialog"<br>
@image html ./doc/images/x11/dialog_exit.png "Automatic Run - Exit Notification Dialog"<br>

#### The Update Panel
@image html ./doc/images/x11/panel_idle.png "Panel before clicking"<br>
@image html ./doc/images/x11/panel_checking.png "Panel while checking"<br>
@image html ./doc/images/x11/panel_updates.png "Panel with updates"<br>
@image html ./doc/images/x11/panel_no_updates.png "Panel without updates"<br>

#### The Action
@image html ./doc/images/x11/action.png "Update action inside a menu and a toolbar"<br>
*/

/*!
@class QtAutoUpdater::UpdateController

The update-controller is a helpful tool if you want to show a simple GUI to the users.
It offers an automated update process, controlled by the user. All thats left for you
to do is starting this controller. This can be done in 4 ways:
 - Call UpdateController::start somewhere in your code
 - Schedule an update using UpdateController::scheduleUpdate(UpdateTask *, DisplayLevel)
 - Add the QAction returned by UpdateController::getUpdateAction somewhere in your gui
 - Add the widget returned by UpdateController::createUpdatePanel somewhere in your gui

## Images
For a full collection of all immages, please go to the @ref image_page "Image Page"

## Example
This example will show you the basic capabilities of the controller. Since there is no
mainwindow in this example, you will only see the controller dialogs. Please not that
you can control how much of that dialogset will be shown to the user. This example is
reduced! for a full example with all parts of the controller, check the
Tests/WidegtsTest application!

@attention Since this library requires the maintenancetool that is deployed with every
Qt Installer Framework installation, the examples cannot be tested without a
maintenancetool! If you intend to use this library, the maintenancetool will be
available for your final application. For testing purpose or the examples, I set the
path to the MaintenanceTool that is deployed with the installation of Qt (since you
all should have at least that one). So make shure to adjust the path if you try to run
the example.

@code{.cpp}
#include <QApplication>
#include <updatecontroller.h>

int main(int argc, char *argv[])
{
	QApplication a(argc, argv);
	//Since there is no mainwindow, the various dialogs should not quit the app
	QApplication::setQuitOnLastWindowClosed(false);
	//create the update controller with the application as parent -> will live long enough start the tool on exit
	//since the parent is not a widget, all dialogs will be top-level windows
	//QtAutoUpdater::UpdateController *controller = new QtAutoUpdater::UpdateController(&a);
	QtAutoUpdater::UpdateController *controller = new QtAutoUpdater::UpdateController("C:/Qt/MaintenanceTool", &a);//.exe is automatically added

	QObject::connect(updater, &QtAutoUpdater::UpdateController::runningChanged, [updater](bool running) {
		qDebug() << "Running changed:" << running;
		//quit the application as soon as the updating finished
		if(!running)
			qApp->quit();
	});

	//start the update check -> AskLevel to give the user maximum control
	controller->start(QtAutoUpdater::UpdateController::AskLevel);
	return a.exec();
}
@endcode
*/

/*!
@enum QtAutoUpdater::UpdateController::DisplayLevel

The display level controlls the kind of dialogs shown to the user. Levels are ranked from
the lowest (`AutomaticLevel = 0`) to the highest (`AskLevel = 5`). Each Level includes all
levels with a smaller value, i.e. using the `AskLevel` will add the ask dialog to everything
shown with `ProgressLevel`, but not less.

@sa @ref image_page "Image Page"
*/

/*!
@property QtAutoUpdater::UpdateController::maintenanceToolPath

@default{Updater::maintenanceToolPath}

This property is simply the forewarded Updater::maintenanceToolPath. Check the
documentation of that property for more details.

@accessors{
	@readAc{maintenanceToolPath()}
	@constantAc
	@finalAc
}

@sa Updater::maintenanceToolPath
*/

/*!
@property QtAutoUpdater::UpdateController::running

@default{`false`}

The controller can only run once at a time. If this property returns `true`, you will
have to wait for it to finish to start it again. Please note that "running" includes
not just that actual update check, but all the dialogs too. This means the Updater::running
property of the attached updater can return `false` while this one returns `true`.

@accessors{
	@readAc{isRunning()}
	@notifyAc{runningChanged()}
}

@sa UpdateController::getUpdater, UpdateController::start, UpdateController::cancelUpdate
*/

/*!
@property QtAutoUpdater::UpdateController::runAsAdmin

@default{`true`}

Specifies whether the controller should run the updater (**not** the update check) as
admin/root. If set `true`, the user will be prompted to allow this elevation (and enter
his password).

@note This property only specifies a "suggestion" to the user. If you want to disallow
the user to change this, you will have to explicitly set it to be unchangable using
the write accessor function of this property.

@accessors{
	@readAc{runAsAdmin()}
	@writeAc{setRunAsAdmin()}
	@notifyAc{runAsAdminChanged()}
}

@sa UpdateController::setRunAsAdmin, UpdateController::updateRunArgs
*/

/*!
@property QtAutoUpdater::UpdateController::updateRunArgs

@default{`{"--updater"}`}

These arguments will be used to invoke the updater with it on exit (if updates are
available). See Updater::runUpdaterOnExit(AdminAuthoriser *) for more details about
"running on exit". If UpdateController::runAsAdmin is set to `true`, the maintenancetool
will be run with elevated rights.

@accessors{
	@readAc{updateRunArgs()}
	@writeAc{setUpdateRunArgs()}
	@resetAc{resetUpdateRunArgs()}
}

@sa UpdateController::runAsAdmin, Updater::runUpdaterOnExit(AdminAuthoriser *)
*/

/*!
@fn QtAutoUpdater::UpdateController::UpdateController(QObject *)

@overload
@param parent The parent object. Will serve as parent for the controller

The created controller will not be bound to a specific window. Instead, all it's dialogs
will be top-level windows without a parent and application modal.

@note If you set `parent` to anything but `NULL`, make shure the parent object lives long
enough for the controller to receive the QCoreApplication::aboutToQuit signal, since thats
required for the updater to show the maintenancetool as updater.

@overloads{
	@povElem{UpdateController(QObject *)}
	@povElem{UpdateController(QWidget *)}
	@ovElem{UpdateController(const QString &, QObject *)}
	@ovElem{UpdateController(const QString &, QWidget *)}
}

@sa QObject::parent, UpdateController::setParent(QObject *)
*/

/*!
@fn QtAutoUpdater::UpdateController::UpdateController(QWidget *)

@overload
@param parentWidget The parent widget. Will serve as parent for the controller and windows

The created controller will be bound to the widget. This means all dialogs will be child
windows of the widgets window. On Mac, dialogs will be shown as "Sheets" of the parent
window.

@note If you set `parent` to anything but `NULL`, make shure the parent object lives long
enough for the controller to receive the QCoreApplication::aboutToQuit signal, since thats
required for the updater to show the maintenancetool as updater.

@overloads{
	@povElem{UpdateController(QObject *)}
	@povElem{UpdateController(QWidget *)}
	@ovElem{UpdateController(const QString &, QObject *)}
	@ovElem{UpdateController(const QString &, QWidget *)}
}

@sa UpdateController::parentWidget, UpdateController::setParent(QWidget *)
*/

/*!
@fn QtAutoUpdater::UpdateController::UpdateController(const QString &, QObject *)

@overload
@param maintenanceToolPath The path to the maintenancetool
@param parent The parent object. Will serve as parent for the controller

The maintenancetool path will be set to the given one (and cannot be changed). See
UpdateController::maintenanceToolPath for more details.

@overloads{
	@povElem{UpdateController(QObject *)}
	@povElem{UpdateController(QWidget *)}
	@ovElem{UpdateController(const QString &, QObject *)}
	@ovElem{UpdateController(const QString &, QWidget *)}
}

@sa QObject::parent, UpdateController::setParent(QObject *), UpdateController::maintenanceToolPath
*/

/*!
@fn QtAutoUpdater::UpdateController::UpdateController(const QString &, QWidget *)

@overload
@param maintenanceToolPath The path to the maintenancetool
@param parentWidget The parent widget. Will serve as parent for the controller and windows

The maintenancetool path will be set to the given one (and cannot be changed). See
UpdateController::maintenanceToolPath for more details.

@overloads{
	@povElem{UpdateController(QObject *)}
	@povElem{UpdateController(QWidget *)}
	@ovElem{UpdateController(const QString &, QObject *)}
	@ovElem{UpdateController(const QString &, QWidget *)}
}

@sa UpdateController::parentWidget, UpdateController::setParent(QWidget *), UpdateController::maintenanceToolPath
*/

/*!
@fn QtAutoUpdater::UpdateController::getUpdateAction

@returns The action associated with this controller

The action will automatically start the controller with the display-level
`UpdateController::ProgressLevel`. In addition to that, the action will be automatically
disabled if the controller is already running. For images check the
@ref image_page "Image Page".

The action has a text, an icon and a tooltip. The icon is set to be only visibile in a
toolbar, not in a menu. On Mac, the action will be place in the Applications menu if
added to the Menubar.

@attention This function will always return the same QAction object for each controller.
Thus, you may never delete the action. It will be deleted on destruction of the the
controller. Take in mind that any change you make to this action (for example change the
icon) will thus be that way for *all* components that use this action.

@sa UpdateController::createUpdatePanel, @ref image_page "Image Page"
*/

/*!
@fn QtAutoUpdater::UpdateController::createUpdatePanel

@param parentWidget The parent widget of the update panel widget
@returns The action associated with this controller

The UpdatePanel is a ready-made "button" to check for updates. It is connected to this
controller and thus will automatically start checking for updates with the level
`UpdateController::ExtendedInfoLevel`. Since the panel itself shows a progress, no progress
dialog is needed here. For images check the @ref image_page "Image Page".

The panel will represent the controllers state and automatically enable/disable itself to
avoid start beeing called twice. In addition to that, the whole panel widget will be disabled
if the controller gets deleted while the panel is still existings. (Even if it wasn't,
it will not crash if the button is clicked).

@note The UpdatePanel class itself is an internal class. Reason: It directly derives from
QWidget and does not add any new public accessible functions. Thus, even if the class would
be returned, there would be no difference to a QWidget except of the pointer type.

@sa UpdateController::getUpdateAction, @ref image_page "Image Page"
*/

/*!
@fn QtAutoUpdater::UpdateController::setRunAsAdmin

<b>Property: UpdateController::runAsAdmin</b>

@param runAsAdmin `true`, if the maintenancetool should be run as admin/root, `false` to
run it with the rights of the current user
@param userEditable If set to `true`, the user can change this value in the info dialog.
If set to `false`, he will not be able to do so

The second parameter allows you to disable the change of this property by the user. If
`userEditable` is true, the user can check/uncheck a checkbox in the info dialog. If
`false`, this checkbox will be disabled. (The user can see the required rights, but not
change them)

@sa UpdateController::runAsAdmin
*/
